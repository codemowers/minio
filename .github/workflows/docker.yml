name: Build MinIO (binaries + multi-arch image)

on:
  push:
    branches: [ main ]
  schedule:
    # Run every day at 00:00 UTC
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  get-minio-latest:
    name: Get latest MinIO tag
    runs-on: ubuntu-latest
    outputs:
      minio_version: ${{ steps.get_latest.outputs.tag }}
    steps:
      - name: Fetch latest MinIO release
        id: get_latest
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.repos.getLatestRelease({
              owner: 'minio',
              repo: 'minio'
            });
            core.setOutput("tag", data.tag_name);

  go-binaries:
    name: Cross-compile (${{ matrix.target.name }})
    needs: get-minio-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: "allwinner-a20", GOOS: "linux", GOARCH: "arm", GOARM: "7", out: "minio_linux_armv7" }
          - { name: "rpi-arm64",     GOOS: "linux", GOARCH: "arm64", out: "minio_linux_arm64" }
          - { name: "x86-386",       GOOS: "linux", GOARCH: "386",   out: "minio_linux_386" }
          - { name: "amd64",         GOOS: "linux", GOARCH: "amd64", out: "minio_linux_amd64" }
    env:
      MINIO_VERSION: ${{ needs.get-minio-latest.outputs.minio_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Fetch MinIO source
        run: |
          git clone --depth 1 --branch "${MINIO_VERSION}" https://github.com/minio/minio.git

      - name: Get version info
        working-directory: minio
        run: |
          COMMIT_ID="$(git rev-parse --short HEAD)"
          VERSION="$(git describe --tags --always || echo "${COMMIT_ID}")"
          echo "COMMIT_ID=${COMMIT_ID}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build binary
        working-directory: minio
        env:
          GOOS:   ${{ matrix.target.GOOS }}
          GOARCH: ${{ matrix.target.GOARCH }}
          GOARM:  ${{ matrix.target.GOARM || '' }}
        run: |
          CGO_ENABLED=0 go build -trimpath \
            -ldflags "-s -w -X github.com/minio/minio/cmd.Version=${VERSION} -X github.com/minio/minio/cmd.CommitID=${COMMIT_ID}" \
            -o "../${{ matrix.target.out }}" ./cmd

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.out }}
          path: ${{ matrix.target.out }}

  docker-image:
    name: Build & push Docker image
    needs: [ get-minio-latest, go-binaries ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      IMAGE_NAME: ${{ github.repository }}
      MINIO_VERSION: ${{ needs.get-minio-latest.outputs.minio_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute tags
        id: meta
        run: |
          SHA_SHORT="${GITHUB_SHA::7}"
          TAGS="${IMAGE_NAME}:${SHA_SHORT},${IMAGE_NAME}:${MINIO_VERSION},${IMAGE_NAME}:latest"
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            MINIO_VERSION=${{ env.MINIO_VERSION }}
          platforms: linux/arm/v7,linux/arm64,linux/386,linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
